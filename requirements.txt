# Centralizador de Proyectos

Este es un proyecto que centraliza la ejecución y gestión de múltiples subproyectos, permitiendo interactuar con ellos desde una interfaz gráfica. Cada subproyecto es independiente, con su propio punto de entrada y lógica específica, y el centralizador actúa como un punto de control común.

---

## **Estructura del Proyecto**

```
central_project/
├── main.py                   # Punto de entrada principal
├── ui/
│   ├── app_ui.py             # Interfaz gráfica del centralizador
├── services/
│   ├── project_service.py    # Lógica para manejar los proyectos
├── projects/
│   ├── pomodoro/
│   │   ├── main.py           # Main del proyecto Pomodoro
│   │   ├── services/
│   │   ├── ui/
│   ├── proyecto2/
│   │   ├── main.py           # Main del Proyecto 2
│   ├── proyecto3/
│       ├── main.py           # Main del Proyecto 3
├── tests/
│   ├── test_project_service.py
│   ├── test_timer_service.py
├── README.md                 # Documentación del proyecto
└── requirements.txt          # Dependencias comunes
```

---

## **Requisitos Previos**

Antes de ejecutar el proyecto, asegúrate de tener instalado:

1. **Python 3.8 o superior**
2. **pip** (Administrador de paquetes de Python)
3. Opcional: un entorno virtual para gestionar las dependencias del proyecto.

---

## **Instalación**

1. Clona el repositorio:
   ```bash
   git clone https://github.com/tu_usuario/central_project.git
   cd central_project
   ```

2. (Opcional) Crea y activa un entorno virtual:
   ```bash
   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   venv\Scripts\activate   # Windows
   ```

3. Instala las dependencias:
   ```bash
   pip install -r requirements.txt
   ```

---

## **Uso del Centralizador**

1. Ejecuta el archivo principal:
   ```bash
   python main.py
   ```

2. Aparecerá una interfaz gráfica donde podrás:
   - Ver la lista de proyectos disponibles.
   - Ejecutar cualquier proyecto seleccionado.
   - Refrescar la lista de proyectos.
   - Salir del centralizador.

---

## **Ejecución de Tests**

1. Para ejecutar todos los tests del proyecto:
   ```bash
   pytest
   ```

2. Para ejecutar los tests de un módulo específico, por ejemplo, `project_service`:
   ```bash
   pytest tests/test_project_service.py
   ```

3. Generar un reporte detallado:
   ```bash
   pytest -v
   ```

---

## **Estructura de Subproyectos**

Cada subproyecto tiene la siguiente estructura básica:

```
projects/
├── nombre_proyecto/
│   ├── main.py          # Punto de entrada del proyecto
│   ├── services/        # Lógica específica del proyecto
│   ├── ui/              # Interfaz gráfica del proyecto (opcional)
```

Puedes agregar nuevos subproyectos simplemente creando una nueva carpeta en `projects/` con su propio archivo `main.py`.

---

## **Contribuciones**

Si deseas contribuir a este proyecto:

1. Haz un fork del repositorio.
2. Crea una rama con tu nueva funcionalidad o corrección:
   ```bash
   git checkout -b nueva_funcionalidad
   ```
3. Haz tus cambios y realiza commits:
   ```bash
   git commit -m "Agrega nueva funcionalidad"
   ```
4. Envía un pull request.

---

## **Licencia**

Este proyecto está licenciado bajo la [MIT License](https://opensource.org/licenses/MIT).

